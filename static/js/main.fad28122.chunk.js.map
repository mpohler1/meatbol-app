{"version":3,"sources":["actions/actions.js","actions/actionTypes.js","components/InputBox.jsx","components/OutputBox.jsx","components/InterpretButton.jsx","service/webServerService.js","components/ExamplesButton.jsx","resources/bubbleSort.js","resources/binarySearch.js","App.jsx","reducers/inputBoxReducer.js","reducers/interpretButtonReducer.js","reducers/examplesButtonReducer.js","reducers/index.js","store/store.js","index.js"],"names":["inputTextChange","input","selectionStart","selectionEnd","type","payload","InputBox","event","this","props","target","value","keyCode","preventDefault","shiftHeld","performShiftTab","performSelectionTab","performSingleTab","setShiftHeld","className","htmlFor","id","cols","wrap","onKeyDown","handleKeyDown","onKeyUp","handleKeyUp","onChange","handleInputTextChange","ref","setSelectionRange","substring","length","blockStart","alignBlockStartToStartOfLine","blockEnd","alignBlockEndToEndOfLine","originalBlock","block","addTabsToEveryLineInBlock","differenceInLengthBetweenFirstLineOfEachBlock","removeTabsFromEveryLineInBlock","lines","split","i","join","startsWith","firstBlock","secondBlock","firstLineOfFirstBlock","firstLineOfSecondBlock","Math","abs","Component","connect","state","inputBox","OutputBox","output","focus","readOnly","interpretButton","InterpretButton","text","interpretRequest","fetch","method","headers","body","then","response","Promise","all","json","status","interpretSuccess","interpretError","onClick","handleOnClick","ExamplesButton","menuVisible","setMenuVisible","relatedTarget","click","exampleText","aria-haspopup","aria-expanded","handleButtonClick","onBlur","handleOnBlur","aria-labelledby","handleExample","examplesButton","App","inputBoxReducer","action","Object","assign","interpretButtonReducer","examplesButtonReducer","combineReducers","createStore","rootReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.fad28122.chunk.js","sourcesContent":["import {\r\n    INPUT_TEXT_CHANGE,\r\n    INTERPRET_ERROR,\r\n    INTERPRET_REQUEST,\r\n    INTERPRET_SUCCESS,\r\n    SET_MENU_VISIBLE,\r\n    SET_SHIFT_HELD\r\n} from \"./actionTypes\";\r\n\r\nexport const inputTextChange = (input, selectionStart, selectionEnd) => ({\r\n    type: INPUT_TEXT_CHANGE,\r\n    payload: {\r\n        input: input,\r\n        selectionStart: selectionStart,\r\n        selectionEnd: selectionEnd\r\n    }\r\n});\r\n\r\nexport const setShiftHeld = (shiftHeld, selectionStart, selectionEnd) => {\r\n    return ({\r\n        type: SET_SHIFT_HELD,\r\n        payload: {\r\n            shiftHeld: shiftHeld,\r\n            selectionStart: selectionStart,\r\n            selectionEnd: selectionEnd\r\n        }\r\n    });\r\n};\r\n\r\nexport const interpretRequest = () => {\r\n    return ({\r\n        type: INTERPRET_REQUEST\r\n    });\r\n};\r\n\r\nexport const interpretSuccess = (output) => {\r\n    return {\r\n        type: INTERPRET_SUCCESS,\r\n        payload: {\r\n            output: output\r\n        }\r\n    }\r\n};\r\n\r\nexport const interpretError = () => {\r\n    return {\r\n        type: INTERPRET_ERROR\r\n    }\r\n};\r\n\r\nexport const setMenuVisible = (menuVisible) => {\r\n    return {\r\n        type: SET_MENU_VISIBLE,\r\n        payload: {\r\n            menuVisible: menuVisible\r\n        }\r\n    }\r\n};\r\n","export const INPUT_TEXT_CHANGE = \"INPUT_TEXT_CHANGE\";\r\nexport const SET_SHIFT_HELD = \"SET_SHIFT_HELD\";\r\nexport const INTERPRET_REQUEST = \"INTERPRET_REQUEST\";\r\nexport const INTERPRET_SUCCESS = \"INTERPRET_SUCCESS\";\r\nexport const INTERPRET_ERROR = \"INTERPRET_ERROR\";\r\nexport const SET_MENU_VISIBLE = \"SET_MENU_VISIBLE\";\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {inputTextChange, setShiftHeld} from \"../actions/actions\";\r\n\r\nclass InputBox extends Component {\r\n\r\n    handleInputTextChange(event) {\r\n        this.props.inputTextChange(\r\n            event.target.value,\r\n            event.target.selectionStart,\r\n            event.target.selectionEnd\r\n        );\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 9:\r\n                event.preventDefault();\r\n                if (this.props.shiftHeld) {\r\n                    this.performShiftTab(event);\r\n                }\r\n                else if (event.target.selectionEnd - event.target.selectionStart > 0) {\r\n                    this.performSelectionTab(event);\r\n                } else {\r\n                    this.performSingleTab(event);\r\n                }\r\n                break;\r\n\r\n            case 16:\r\n                this.props.setShiftHeld(\r\n                    true,\r\n                    event.target.selectionStart,\r\n                    event.target.selectionEnd\r\n                );\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleKeyUp(event) {\r\n        if (event.keyCode === 16) {\r\n            this.props.setShiftHeld(\r\n                false,\r\n                event.target.selectionStart,\r\n                event.target.selectionEnd\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"inputBoxTextArea\">Meatbol Code</label>\r\n                <textarea className=\"form-control text-monospace overflow-auto console\"\r\n                          id={\"inputBoxTextArea\" /* needs to be stored in state if multiple of these */}\r\n                          cols=\"80\"\r\n                          wrap=\"off\"\r\n                          value={this.props.input}\r\n                          onKeyDown={(event) => this.handleKeyDown(event)}\r\n                          onKeyUp={(event) => this.handleKeyUp(event)}\r\n                          onChange={(event) => this.handleInputTextChange(event)}\r\n                          ref={input => input && input.setSelectionRange(this.props.selectionStart, this.props.selectionEnd)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    performSingleTab(event) {\r\n        let input = event.target.value;\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        input = input.substring(0, selectionStart) + \"\\t\" + input.substring(selectionEnd, input.length);\r\n        this.props.inputTextChange(\r\n            input,\r\n            selectionStart+1,\r\n            selectionEnd+1\r\n        );\r\n    }\r\n\r\n    performSelectionTab(event) {\r\n        let input = event.target.value;\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        // define the block and it's boundaries\r\n        const blockStart = this.alignBlockStartToStartOfLine(input, selectionStart);\r\n        const blockEnd = this.alignBlockEndToEndOfLine(input, selectionEnd);\r\n        const originalBlock = input.substring(blockStart, blockEnd);\r\n\r\n        // create a new block with \\t at the start of any line within it\r\n        const block = this.addTabsToEveryLineInBlock(originalBlock);\r\n\r\n        // set start and end to appropriate values for cursor\r\n        selectionStart += this.differenceInLengthBetweenFirstLineOfEachBlock(originalBlock, block);\r\n        selectionEnd += block.length - originalBlock.length;\r\n        selectionStart = selectionStart < 0 ? 0: selectionStart;\r\n        selectionEnd = selectionEnd < 0 ? 0: selectionEnd;\r\n\r\n        // make the input with the modified block and save it to state\r\n        input = input.substring(0, blockStart) + block + input.substring(blockEnd, input.length);\r\n\r\n        this.props.inputTextChange(\r\n            input,\r\n            selectionStart,\r\n            selectionEnd\r\n        );\r\n    }\r\n\r\n    performShiftTab(event) {\r\n        let input = event.target.value;\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        // define the block and it's boundaries\r\n        const blockStart = this.alignBlockStartToStartOfLine(input, selectionStart);\r\n        const blockEnd = this.alignBlockEndToEndOfLine(input, selectionEnd);\r\n        const originalBlock = input.substring(blockStart, blockEnd);\r\n\r\n        // create a new block with \\t removed from the start of any line within it\r\n        const block = this.removeTabsFromEveryLineInBlock(originalBlock);\r\n\r\n        // set start and end to appropriate values for cursor\r\n        selectionStart -= this.differenceInLengthBetweenFirstLineOfEachBlock(originalBlock, block);\r\n        selectionEnd += block.length - originalBlock.length;\r\n        selectionStart = selectionStart < 0 ? 0: selectionStart;\r\n        selectionEnd = selectionEnd < 0 ? 0: selectionEnd;\r\n\r\n        // make the input with the modified block and save it to state\r\n        input = input.substring(0, blockStart) + block + input.substring(blockEnd, input.length);\r\n\r\n        this.props.inputTextChange(\r\n            input,\r\n            selectionStart,\r\n            selectionEnd\r\n        );\r\n    }\r\n\r\n    alignBlockStartToStartOfLine(input, selectionStart) {\r\n        while(selectionStart > 0 && input[selectionStart-1] !== \"\\n\") {\r\n            selectionStart--;\r\n        }\r\n\r\n        return selectionStart;\r\n    }\r\n\r\n    alignBlockEndToEndOfLine(input, selectionEnd) {\r\n        while(selectionEnd < input.length && input[selectionEnd] !== \"\\n\") {\r\n            selectionEnd++;\r\n        }\r\n\r\n        return selectionEnd;\r\n    }\r\n\r\n    addTabsToEveryLineInBlock(block) {\r\n        let lines = block.split(\"\\n\");\r\n        for (let i = 0; i < lines.length; i++) {\r\n            lines[i] = \"\\t\" + lines[i];\r\n        }\r\n        return lines.join(\"\\n\");\r\n    }\r\n\r\n    removeTabsFromEveryLineInBlock(block) {\r\n        let lines = block.split(\"\\n\");\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].startsWith(\"\\t\") || lines[i].startsWith(\" \")) {\r\n                lines[i] = lines[i].substring(1, lines[i].length);\r\n            }\r\n        }\r\n        return lines.join(\"\\n\");\r\n    }\r\n\r\n    differenceInLengthBetweenFirstLineOfEachBlock(firstBlock, secondBlock) {\r\n        let firstLineOfFirstBlock = firstBlock.split(\"\\n\")[0];\r\n        let firstLineOfSecondBlock = secondBlock.split(\"\\n\")[0];\r\n        return Math.abs(firstLineOfFirstBlock.length - firstLineOfSecondBlock.length);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        input: state.inputBox.input,\r\n        shiftHeld: state.inputBox.shiftHeld,\r\n        selectionStart: state.inputBox.selectionStart,\r\n        selectionEnd: state.inputBox.selectionEnd\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    inputTextChange,\r\n    setShiftHeld\r\n})(InputBox);\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass OutputBox extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"outputBoxTextArea\">Output</label>\r\n                <textarea className=\"form-control text-monospace overflow-auto console\"\r\n                          id=\"outputBoxTextArea\"\r\n                          ref={output => this.props.output && output && output.focus()}\r\n                          cols=\"80\"\r\n                          value={this.props.output}\r\n                          readOnly={true}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        output: state.interpretButton.output\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(OutputBox);\r\n","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {interpretError, interpretRequest, interpretSuccess} from \"../actions/actions\";\r\nimport {interpretText} from \"../service/webServerService\";\r\n\r\nclass InterpretButton extends Component {\r\n\r\n    handleOnClick(input) {\r\n        this.props.interpretRequest();\r\n        return interpretText(input).then(([response, json]) => {\r\n            if (response.status === 200) {\r\n                this.props.interpretSuccess(json.text);\r\n            } else {\r\n                this.props.interpretError();\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"btn btn-primary\"\r\n                    onClick={() => this.handleOnClick(this.props.input)}>\r\n                Interpret\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        input: state.inputBox.input\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    interpretRequest,\r\n    interpretSuccess,\r\n    interpretError\r\n})(InterpretButton);\r\n","export function interpretText(text) {\r\n    const webServerEndpoint = \"https://api.masonpohler.com:5000/interpret/text\";\r\n    const headers = {\r\n        'Content-Type': 'application/json'\r\n    };\r\n    return fetch(webServerEndpoint, {method: 'POST', headers: headers, body: text})\r\n        .then( response => Promise.all([response, response.json()]));\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {inputTextChange, setMenuVisible} from \"../actions/actions\";\r\nimport {bubbleSortExampleText} from \"../resources/bubbleSort\";\r\nimport {binarySearchExampleText} from \"../resources/binarySearch\";\r\n\r\nclass ExamplesButton extends Component {\r\n\r\n    handleButtonClick() {\r\n        if (this.props.menuVisible === null) {\r\n            this.props.setMenuVisible(true);\r\n        } else {\r\n            this.props.setMenuVisible(!this.props.menuVisible);\r\n        }\r\n    }\r\n\r\n    handleOnBlur(event) {\r\n        if (event && event.relatedTarget) {\r\n            event.relatedTarget.click();\r\n        }\r\n        this.props.setMenuVisible(false);\r\n    }\r\n\r\n    handleExample(exampleText) {\r\n        this.props.inputTextChange(\r\n            exampleText,\r\n            0,\r\n            0\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dropup\">\r\n                <button className=\"btn btn-info dropdown-toggle\"\r\n                        type=\"button\"\r\n                        id=\"dropdownMenuButton\"\r\n                        aria-haspopup=\"true\"\r\n                        aria-expanded=\"false\"\r\n                        onClick={() => this.handleButtonClick()}\r\n                        onBlur={event => this.handleOnBlur(event)}>\r\n                    Load An Example!\r\n                </button>\r\n                {\r\n                    this.props.menuVisible &&\r\n                    (\r\n                        <div className=\"dropdown-menu show\"\r\n                             aria-labelledby=\"dropdownMenuButton\">\r\n                            <button className=\"btn dropdown-item\"\r\n                                    onClick={() => this.handleExample(bubbleSortExampleText)}>\r\n                                Bubble Sort\r\n                            </button>\r\n                            <div className=\"dropdown-divider\" />\r\n                            <button className=\"btn dropdown-item\"\r\n                                    onClick={() => this.handleExample(binarySearchExampleText)}>\r\n                                Binary Search\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        menuVisible: state.examplesButton.menuVisible\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    setMenuVisible,\r\n    inputTextChange\r\n})(ExamplesButton);\r\n","export const bubbleSortExampleText = (\r\n    \"print(\\\"Bubble Sort Example\\\\n\\\");\\n\" +\r\n    \"\\n\" +\r\n    \"Int array[] = 99, 55, 24, 67, 39, 84;\\n\" +\r\n    \"print(\\\"Unsorted: [\\\", array, \\\"] \\\\n\\\");\\n\" +\r\n    \"\\n\" +\r\n    \"for i = 0 to ELEM(array)-1:      \\n\" +\r\n    \"\\n\" +\r\n    \"\\tfor j = 0 to ELEM(array)-i-1:  \\n\" +\r\n    \"\\n\" +\r\n    \"\\t\\tif array[j] > array[j+1]:  \\n\" +\r\n    \"\\t\\t\\tInt temp = array[j];\\n\" +\r\n    \"\\t\\t\\tarray[j] = array[j+1];\\n\" +\r\n    \"\\t\\t\\tarray[j+1] = temp;\\n\" +\r\n    \"\\t\\t\\tprint(\\\"Swapped\\\", array[j+1], \\\"with\\\", array[j], \\\" => [\\\", array, \\\"] \\\");\\n\" +\r\n    \"\\t\\tendif;\\n\" +\r\n    \"\\n\" +\r\n    \"\\tendfor;\\n\" +\r\n    \"\\n\" +\r\n    \"endfor;\\n\" +\r\n    \"\\n\" +\r\n    \"print(\\\"\\\\nSorted: [\\\", array, \\\"] \\\");\"\r\n);\r\n","export const binarySearchExampleText = (\r\n    \"print(\\\"Binary Search Example\\\\n\\\");\\n\" +\r\n    \"\\n\" +\r\n    \"Int sortedArray[] = 0, 3, 6, 9, 11, 23, 45, 88, 100, 111, 123, 143, 152, 167, 199, 204;\\n\" +\r\n    \"Int target = 123;\\n\" +\r\n    \"Int index;\\n\" +\r\n    \"\\n\" +\r\n    \"print(\\\"Sorted Array: [\\\", sortedArray, \\\"] \\\");\\n\" +\r\n    \"print(\\\"Target:\\\", target):\\n\" +\r\n    \"print();\\n\" +\r\n    \"\\n\" +\r\n    \"Int low = 0;\\n\" +\r\n    \"Int high = ELEM(sortedArray)-1;\\n\" +\r\n    \"while low <= high:\\n\" +\r\n    \"\\n\" +\r\n    \"\\t// For printing chunks, unrelated to binary search\\n\" +\r\n    \"\\tInt elements = high-low+1;\\n\" +\r\n    \"\\tInt chunk[elements];\\n\" +\r\n    \"\\tfor i = 0 to elements:\\n\" +\r\n    \"\\t\\tchunk[i] = sortedArray[low+i];\\n\" +\r\n    \"\\tendfor;\\n\" +\r\n    \"\\t// For printing chunks, unrelated to binary search\\n\" +\r\n    \"\\n\" +\r\n    \"\\t// Binary Search below\\n\" +\r\n    \"\\tInt mid = (low + high) / 2;\\n\" +\r\n    \"\\n\" +\r\n    \"\\tprint(\\\"Searching chunk [\\\", chunk, \\\"] Mid =\\\", sortedArray[mid]);\\n\" +\r\n    \"\\n\" +\r\n    \"\\tif sortedArray[mid] == target:\\n\" +\r\n    \"\\t\\tprint();\\n\" +\r\n    \"\\t\\tprint(target \\\"was found in chunk\\\" chunk);\\n\" +\r\n    \"\\t\\tindex = mid;\\n\" +\r\n    \"\\t\\tbreak;\\n\" +\r\n    \"\\tendif;\\n\" +\r\n    \"\\n\" +\r\n    \"\\tif target < sortedArray[mid]:\\n\" +\r\n    \"\\t\\thigh = mid - 1;\\n\" +\r\n    \"\\telse:\\n\" +\r\n    \"\\t\\tlow = mid + 1;\\n\" +\r\n    \"\\tendif;\\n\" +\r\n    \"\\n\" +\r\n    \"endwhile;\\n\" +\r\n    \"\\n\" +\r\n    \"print(\\\"The index of\\\", target, \\\"was\\\", mid);\"\r\n);\r\n","import React, {Component} from 'react';\r\nimport InputBox from \"./components/InputBox\";\r\nimport OutputBox from \"./components/OutputBox\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport InterpretButton from \"./components/InterpretButton\";\r\nimport './App.css';\r\nimport ExamplesButton from \"./components/ExamplesButton\";\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row m-1\">\r\n                    <div className=\"col-12 m-1\">\r\n                        <h1 className=\"h1\" >Meatbol Interpreter</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row m-1\">\r\n                    <div className=\"col-lg m-1\">\r\n                        <InputBox />\r\n                        <div className=\"row\">\r\n                            <div className=\"ml-3\">\r\n                                <ExamplesButton />\r\n                            </div>\r\n                            <div className=\"ml-3\">\r\n                                <InterpretButton />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-lg m-1\">\r\n                        <OutputBox />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import {INPUT_TEXT_CHANGE, SET_SHIFT_HELD} from \"../actions/actionTypes\";\r\n\r\nfunction inputBoxReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case INPUT_TEXT_CHANGE:\r\n            return Object.assign({}, state, {\r\n                input: action.payload.input,\r\n                selectionStart: action.payload.selectionStart,\r\n                selectionEnd: action.payload.selectionEnd\r\n            });\r\n        case SET_SHIFT_HELD:\r\n            return Object.assign({}, state, {\r\n                shiftHeld: action.payload.shiftHeld,\r\n                selectionStart: action.payload.selectionStart,\r\n                selectionEnd: action.payload.selectionEnd\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default inputBoxReducer;\r\n","import {INTERPRET_ERROR, INTERPRET_REQUEST, INTERPRET_SUCCESS} from \"../actions/actionTypes\";\r\n\r\nfunction interpretButtonReducer(state = {}, action) {\r\n    switch(action.type) {\r\n        case INTERPRET_REQUEST:\r\n            return state;\r\n        case INTERPRET_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                output: action.payload.output\r\n            });\r\n        case INTERPRET_ERROR:\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default interpretButtonReducer;\r\n","import {SET_MENU_VISIBLE} from \"../actions/actionTypes\";\r\n\r\nfunction examplesButtonReducer(state = {}, action) {\r\n\r\n    switch (action.type) {\r\n        case SET_MENU_VISIBLE:\r\n            return Object.assign({}, state, {\r\n                menuVisible: action.payload.menuVisible\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default examplesButtonReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport inputBoxReducer from \"./inputBoxReducer\";\r\nimport interpretButtonReducer from \"./interpretButtonReducer\";\r\nimport examplesButtonReducer from \"./examplesButtonReducer\";\r\n\r\nexport default combineReducers({\r\n    inputBox: inputBoxReducer,\r\n    interpretButton: interpretButtonReducer,\r\n    examplesButton: examplesButtonReducer\r\n});\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from '../reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport store from './store/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}